// app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import ClientContext from "@/components/ClientContext";
import "./globals.css";
import Script from "next/script";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <Script id="loading-script" strategy="beforeInteractive">
          {`
            (function() {
              // Create loading element
              document.addEventListener('DOMContentLoaded', function() {
                const hasLoaded = sessionStorage.getItem('hasCompletedInitialLoad');
                
                if (!hasLoaded) {
                  // First load - show loading screen
                  const loadingScreen = document.createElement('div');
                  loadingScreen.id = 'app-loading-screen';
                  loadingScreen.style.position = 'fixed';
                  loadingScreen.style.top = '0';
                  loadingScreen.style.left = '0';
                  loadingScreen.style.width = '100%';
                  loadingScreen.style.height = '100%';
                  loadingScreen.style.backgroundColor = 'white';
                  loadingScreen.style.display = 'flex';
                  loadingScreen.style.alignItems = 'center';
                  loadingScreen.style.justifyContent = 'center';
                  loadingScreen.style.zIndex = '9999';
                  loadingScreen.innerText = 'Loading...';
                  document.body.appendChild(loadingScreen);
                  
                  // Remove after delay
                  setTimeout(() => {
                    loadingScreen.style.opacity = '0';
                    loadingScreen.style.transition = 'opacity 0.5s';
                    setTimeout(() => {
                      loadingScreen.remove();
                      sessionStorage.setItem('hasCompletedInitialLoad', 'true');
                    }, 500);
                  }, 2000);
                }
              });
            })();
          `}
        </Script>
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ClientContext>
          {children}
        </ClientContext>
      </body>
    </html>
  );
}
